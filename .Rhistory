facet_wrap(~year) +
coord_quickmap() +
guides(fill = FALSE) +
scale_fill_brewer(type = 'seq', palette = 2, direction = -1)
ggplot(data = world.map) +
geom_polygon(mapping = aes(x = long,
y = lat,
group = group,
fill = cut(gdp.data, 9, breaks = 9, labels = 1:9)),
color = 'black',
size = 0.25) +
facet_wrap(~year) +
coord_quickmap() +
guides(fill = FALSE) +
scale_fill_brewer(type = 'seq', palette = 2, direction = -1)
world.map <- map_data('world') %>%
mutate(ISO3 = iso.alpha(.$region, n = 3)) %>%
left_join(average.gdp) %>%
mutate(cut(gdp.data, 9, breaks = 9, labels = 1:9))
world.map <- map_data('world') %>%
mutate(ISO3 = iso.alpha(.$region, n = 3)) %>%
left_join(average.gdp) %>%
mutate(cut(gdp.data, 9, breaks = 9, labels = 1:9))
ggplot(data = world.map) +
geom_polygon(mapping = aes(x = long,
y = lat,
group = group,
fill = cut(gdp.data, 9, breaks = 9, labels = 1:9)),
color = 'black',
size = 0.25) +
facet_wrap(~year) +
coord_quickmap() +
guides(fill = FALSE) +
scale_fill_brewer(type = 'seq', palette = 2, direction = -1)
table(cut(gdp.data, 50, breaks = 50, labels = 1:50))
table(cut(gdp.data, 9, breaks = 9, labels = 1:9))
table(cut(world.map$gdp.data, 9, breaks = 9, labels = 1:9))
table(cut(world.map$gdp.data, 6, breaks = 6, labels = 1:6))
table(cut(world.map$gdp.data, 5, breaks = 5, labels = 1:5))
paste0(1:9, '-', 1:9)
paste0(9:0, '-', 8:-1)
ggplot(data = world.map) +
geom_polygon(mapping = aes(x = long,
y = lat,
group = group,
fill = cut(gdp.data, 9, breaks = 9, labels = paste0(9:0, '-', 8:-1))),
color = 'black',
size = 0.25) +
facet_wrap(~year) +
coord_quickmap() +
guides(fill = FALSE) +
scale_fill_brewer(type = 'seq', palette = 2, direction = -1)
ggplot(data = world.map) +
geom_polygon(mapping = aes(x = long,
y = lat,
group = group,
fill = cut(gdp.data, 9, breaks = 9, labels = c(paste0(9:0, '-', 8:-1)))),
color = 'black',
size = 0.25) +
facet_wrap(~year) +
coord_quickmap() +
guides(fill = FALSE) +
scale_fill_brewer(type = 'seq', palette = 2, direction = -1)
c(paste0(9:0, '-', 8:-1))
ggplot(data = world.map) +
geom_polygon(mapping = aes(x = long,
y = lat,
group = group,
fill = cut(gdp.data, 9, breaks = 9, labels = c(paste0(8:0, '-', 7:-1)))),
color = 'black',
size = 0.25) +
facet_wrap(~year) +
coord_quickmap() +
guides(fill = FALSE) +
scale_fill_brewer(type = 'seq', palette = 2, direction = -1)
ggplot(data = world.map) +
geom_polygon(mapping = aes(x = long,
y = lat,
group = group,
fill = cut(gdp.data, 9, breaks = 9, labels = c(paste0(8:0, '-', 7:-1)))),
color = 'black',
size = 0.25) +
facet_wrap(~year) +
coord_quickmap() +
scale_fill_brewer(type = 'seq', palette = 2, direction = -1)
ggplot(data = world.map) +
geom_polygon(mapping = aes(x = long,
y = lat,
group = group,
fill = cut(gdp.data, 9, breaks = 9, labels = c(paste0(8:0, '-', 7:-1)))),
color = 'black',
size = 0.25) +
facet_wrap(~year) +
labs(title = 'Countries vs GDP percent change) +
scale_fill_brewer(type = 'seq', palette = 2, direction = -1) +
ggplot(data = world.map) +
geom_polygon(mapping = aes(x = long,
y = lat,
group = group,
fill = cut(gdp.data, 9, breaks = 9, labels = c(paste0(8:0, '-', 7:-1)))),
color = 'black',
size = 0.25) +
facet_wrap(~year) +
labs(title = 'Countries vs GDP percent change') +
scale_fill_brewer(type = 'seq', palette = 2, direction = -1) +
coord_quickmap()
ggplot(data = world.map) +
geom_polygon(mapping = aes(x = long,
y = lat,
group = group,
fill = cut(gdp.data, 9, breaks = 9, labels = c(paste0(8:0, '-', 7:-1)))),
color = 'black',
size = 0.25) +
facet_wrap(~year) +
labs(title = 'Countries vs GDP percent change', fill = 'Scale') +
scale_fill_brewer(type = 'seq', palette = 2, direction = -1) +
coord_quickmap()
setwd("~/Documents/02 School/00 Year 1/Info 201/assignments/w17-info201-final")
library('dplyr')
library('leaflet')
library('sp')
library('rgdal')
library('maps')
library('ggplot2')
persons.data <- read.csv('data/unhcr_popstats_export_time_series_all_data.csv', stringsAsFactors = FALSE)
# removes 2014 and convert value col to numeric
persons.data <- filter(persons.data, Year != '2014')
persons.data$Value <- sapply(persons.data$Value, as.numeric)
persons.data <- persons.data %>%
filter(Year == 2013) %>%
mutate(ISO3 = iso.alpha(.[['Origin']], n=3))
data <- left_join(test, persons.data)
#coordinates(data) <- cbind(data$long, data$lat)
#data <- SpatialPolygonsDataFrame(data[c(1,2)], data)
#plot(data)
#View(data)
library('plotly')
library('maptools')
SpatialPolygonsDataFrame(wrld_simpl[c(10,11)], persons.data$Value)
data <- left_join(test, persons.data)
library('dplyr')
library('leaflet')
library('sp')
library('rgdal')
library('maps')
library('ggplot2')
library('maptools')
library('plotly')
persons.data <- read.csv('data/unhcr_popstats_export_time_series_all_data.csv', stringsAsFactors = FALSE)
# removes 2014 and convert value col to numeric
persons.data <- filter(persons.data, Year != '2014')
persons.data$Value <- sapply(persons.data$Value, as.numeric)
persons.data <- persons.data %>%
filter(Year == 2013) %>%
mutate(ISO3 = iso.alpha(.[['Origin']], n=3))
data <- left_join(data.frame(wrld_simpl), persons.data)
#coordinates(data) <- cbind(data$long, data$lat)
#data <- SpatialPolygonsDataFrame(data[c(1,2)], data)
#plot(data)
#View(data)
SpatialPolygonsDataFrame(wrld_simpl[c(10,11)], persons.data$Value)
wrld.simpl
library('maptools')
wrld_simpl
world <- data.frame(wrld_simpl)
# import libraries
library('shiny')
library('dplyr')
library('ggplot2')
library('maps')
# test libraries-------
library('plotly')
library('maptools')
# store data set
persons.data <- read.csv('data/unhcr_popstats_export_time_series_all_data.csv', stringsAsFactors = FALSE)
world <- data.frame(wrld_simpl)
library('maptools')
wrld_simpl
install.packages('maptools')
install.packages("maptools")
library('maptools')
data("wrld_simpl")
world <- data.frame(data(wrld_simpl))
world <- data.frame(wrld_simpl)
data("wrld_simpl")
library('dplyr')
library('leaflet')
library('sp')
library('rgdal')
library('maps')
library('ggplot2')
library('maptools')
library('plotly')
persons.data <- read.csv('data/unhcr_popstats_export_time_series_all_data.csv', stringsAsFactors = FALSE)
# removes 2014 and convert value col to numeric
persons.data <- filter(persons.data, Year != '2014')
persons.data$Value <- sapply(persons.data$Value, as.numeric)
persons.data <- persons.data %>%
filter(Year == 2013) %>%
mutate(ISO3 = iso.alpha(.[['Origin']], n=3))
data <- left_join(world, persons.data)
#coordinates(data) <- cbind(data$long, data$lat)
#data <- SpatialPolygonsDataFrame(data[c(1,2)], data)
#plot(data)
#View(data)
SpatialPolygonsDataFrame(wrld_simpl[c(10,11)], persons.data$Value)
SpatialPolygonsDataFrame(wrld_simpl[c(10,11)], persons.data)
SpatialPolygonsDataFrame(wrld_simpl[c(10,11)], data)
View(data)
SpatialPolygonsDataFrame(data[c(10,11)], data)
persons.data <- read.csv('data/unhcr_popstats_export_time_series_all_data.csv', stringsAsFactors = FALSE)
View(persons.data)
shiny::runApp()
runApp()
runApp()
flights <- read.csv('https://raw.githubusercontent.com/plotly/datasets/master/2011_february_aa_flight_paths.csv')
View(flights)
runApp()
# import libraries
library('shiny')
library('dplyr')
library('ggplot2')
library('maps')
library('plotly')
library('maptools')
persons.data <- read.csv('data/unhcr_popstats_export_time_series_all_data.csv', stringsAsFactors = FALSE)
data("wrld_simpl")
world <- data.frame(wrld_simpl)
# removes 2014 and convert value col to numeric
persons.data <- filter(persons.data, Year != '2014')
persons.data$Value <- sapply(persons.data$Value, as.numeric)
data.1 <- persons.data %>%
filter(Year == 2013) %>%
mutate(ISO3.residence = iso.alpha(.$Country...territory.of.asylum.residence, n=3),
ISO3.origin = iso.alpha(.$Origin, n=3)) %>%
left_join(world, by=c('ISO3.residence'='ISO3'))
data.2 <- persons.data %>%
filter(Year == 2013) %>%
mutate(ISO3.residence = iso.alpha(.$Country...territory.of.asylum.residence, n=3),
ISO3.origin = iso.alpha(.$Origin, n=3)) %>%
left_join(world, by=c('ISO3.origin'='ISO3')) %>%
select(ISO3.residence, ISO3.origin, NAME, LAT, LON)
data.3 <- left_join(data.1, data.2, by=c('ISO3.residence'='ISO3.residence', 'ISO3.origin'='ISO3.origin'))
View(data.3)
data.3 <- left_join(data.1, data.2, by=c('ISO3.residence'='ISO3.residence', 'ISO3.origin'='ISO3.origin')) %>%
filter(Country...territory.of.asylum.residence == 'Afghanistan')
data.3 <- left_join(data.1, data.2, by=c('ISO3.residence'='ISO3.residence', 'ISO3.origin'='ISO3.origin')) %>%
filter(Country...territory.of.asylum.residence == 'Afghanistan') %>%
group_by(Origin) %>%
mutate(sum = sum(Value))
data.3 <- left_join(data.1, data.2, by=c('ISO3.residence'='ISO3.residence', 'ISO3.origin'='ISO3.origin')) %>%
filter(Country...territory.of.asylum.residence == 'Afghanistan') %>%
group_by(Origin) %>%
summarise(sum = sum(Value))
data.3 <- left_join(data.1, data.2, by=c('ISO3.residence'='ISO3.residence', 'ISO3.origin'='ISO3.origin')) %>%
filter(Country...territory.of.asylum.residence == 'Afghanistan') %>%
group_by(Origin) %>%
summarise(sum = sum(Value)) %>%
left_join(world)
data.3 <- left_join(data.1, data.2, by=c('ISO3.residence'='ISO3.residence', 'ISO3.origin'='ISO3.origin')) %>%
filter(Country...territory.of.asylum.residence == 'Afghanistan') %>%
group_by(Origin) %>%
summarise(sum = sum(Value)) %>%
left_join(world, by=c('Origin'='NAME'))
data.1 <- persons.data %>%
filter(Year == 2013) %>%
mutate(ISO3.residence = iso.alpha(.$Country...territory.of.asylum.residence, n=3),
ISO3.origin = iso.alpha(.$Origin, n=3)) %>%
group_by(Origin) %>%
summarise(sum = sum(Value)) %>%
left_join(world, by=c('Origin'='NAME')) %>%
left_join(world, by=c('ISO3.residence'='ISO3'))
runApp()
data.3 <- left_join(data.1, data.2, by=c('ISO3.residence'='ISO3.residence', 'ISO3.origin'='ISO3.origin')) %>%
filter(Country...territory.of.asylum.residence == 'Afghanistan')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?filter_
?filter_()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(flights)
runApp()
runApp()
runApp()
?seq_len
runApp()
flights$id <- seq_len(nrow(flights))
View(flights)
runApp()
runApp()
runApp()
shiny::runApp()
persons.data <- filter(persons.data, Year != '2014')
persons.data$Value <- sapply(persons.data$Value, as.numeric)
persons.data <- read.csv('data/unhcr_popstats_export_time_series_all_data.csv', stringsAsFactors = FALSE)
View(persons.data)
runApp()
runApp()
View(persons.data)
world <- data.frame(wrld_simpl)
View(world)
runApp()
runApp()
?plotly_selected
plotly_click
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
persons.data <- read.csv('data/unhcr_popstats_export_time_series_all_data.csv', stringsAsFactors = FALSE)
data("wrld_simpl")
world <- data.frame(wrld_simpl)
# removes 2014 and convert value col to numeric
persons.data <- filter(persons.data, Year != '2014')
persons.data$Value <- sapply(persons.data$Value, as.numeric)
data.1 <- persons.data %>%
filter(Year == 2013) %>%
mutate(ISO3.residence = iso.alpha(.$Country...territory.of.asylum.residence, n=3),
ISO3.origin = iso.alpha(.$Origin, n=3)) %>%
group_by(Origin) %>%
summarise(sum = sum(Value)) %>%
left_join(world, by=c('Origin'='NAME')) %>%
left_join(world, by=c('ISO3.residence'='ISO3'))
data.2 <- persons.data %>%
filter(Year == 2013) %>%
mutate(ISO3.residence = iso.alpha(.$Country...territory.of.asylum.residence, n=3),
ISO3.origin = iso.alpha(.$Origin, n=3)) %>%
left_join(world, by=c('ISO3.origin'='ISO3')) %>%
select(ISO3.residence, ISO3.origin, NAME, LAT, LON)
data.3 <- left_join(data.1, data.2, by=c('ISO3.residence'='ISO3.residence', 'ISO3.origin'='ISO3.origin')) %>%
filter(Country...territory.of.asylum.residence == 'Afghanistan') %>%
group_by(Origin) %>%
summarise(sum = sum(Value)) %>%
left_join(world, by=c('Origin'='NAME'))
# import libraries
library('shiny')
library('dplyr')
library('ggplot2')
library('maps')
library('plotly')
library('maptools')
persons.data <- read.csv('data/unhcr_popstats_export_time_series_all_data.csv', stringsAsFactors = FALSE)
data("wrld_simpl")
world <- data.frame(wrld_simpl)
# removes 2014 and convert value col to numeric
persons.data <- filter(persons.data, Year != '2014')
persons.data$Value <- sapply(persons.data$Value, as.numeric)
data.1 <- persons.data %>%
filter(Year == 2013) %>%
mutate(ISO3.residence = iso.alpha(.$Country...territory.of.asylum.residence, n=3),
ISO3.origin = iso.alpha(.$Origin, n=3)) %>%
group_by(Origin) %>%
summarise(sum = sum(Value)) %>%
left_join(world, by=c('Origin'='NAME')) %>%
left_join(world, by=c('ISO3.residence'='ISO3'))
data.2 <- persons.data %>%
filter(Year == 2013) %>%
mutate(ISO3.residence = iso.alpha(.$Country...territory.of.asylum.residence, n=3),
ISO3.origin = iso.alpha(.$Origin, n=3)) %>%
left_join(world, by=c('ISO3.origin'='ISO3')) %>%
select(ISO3.residence, ISO3.origin, NAME, LAT, LON)
data.3 <- left_join(data.1, data.2, by=c('ISO3.residence'='ISO3.residence', 'ISO3.origin'='ISO3.origin')) %>%
filter(Country...territory.of.asylum.residence == 'Afghanistan') %>%
group_by(Origin) %>%
summarise(sum = sum(Value)) %>%
left_join(world, by=c('Origin'='NAME'))
data.1 <- persons.data %>%
filter(Year == 2013) %>%
mutate(ISO3.residence = iso.alpha(.$Country...territory.of.asylum.residence, n=3),
ISO3.origin = iso.alpha(.$Origin, n=3)) %>%
group_by(Origin) %>%
summarise(sum = sum(Value)) %>%
left_join(world, by=c('Origin'='NAME')) %>%
left_join(world, by=c('ISO3.residence'='ISO3'))
View(data.2)
runApp()
?event_data
runApp()
runApp()
runApp()
runApp()
runApp()
?plot_ly
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?add_trace
?plot_ly
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?plot_geo
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?ifelse
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?tabsetPanel
?tabPanel''
?tabPanel
runApp()
?tabPanel
?tabsetPanel
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?tolower
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
